@using HRDepartment.WebApplication.Api

@inject IHRDepartmentApiWrapper HRDepartmentApi
@inject NavigationManager NavManager

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Типы льгот</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="BenefitTypeGetDto"
                  Data="BenefitTypes"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="BenefitTypeGetDto"
                                Field="@nameof(BenefitTypeGetDto.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteBenefitTypeAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="BenefitTypeGetDto"
                                Field="@nameof(BenefitTypeGetDto.Name)"
                                Caption="Название типа льготы">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<BenefitTypeCreateModal @ref="BenefitTypeCreateModal" OnBenefitTypeAdded="@HandleBenefitTypeAdded" />

@code {
    [Parameter]
    public EventCallback OnDataChanged { get; set; }

    private ICollection<BenefitTypeGetDto> BenefitTypes { get; set; } = new List<BenefitTypeGetDto>();

    private BenefitTypeCreateModal BenefitTypeCreateModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshBenefitTypeCollection();
        await base.OnInitializedAsync();
    }

    private void OpenEditPageAsync(BenefitTypeGetDto context)
    {
        NavManager.NavigateTo($"benefittypes/{context.Id}");
    }

    private async Task DeleteBenefitTypeAsync(BenefitTypeGetDto context)
    {
        await HRDepartmentApi.DeleteBenefitType(context.Id); 
        await RefreshBenefitTypeCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task HandleBenefitTypeAdded()
    {
        await RefreshBenefitTypeCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task OpenCreateModal() => await BenefitTypeCreateModal.Show();

    private async Task RefreshBenefitTypeCollection()
    {
        BenefitTypes = await HRDepartmentApi.GetAllBenefitTypes();
    }
}